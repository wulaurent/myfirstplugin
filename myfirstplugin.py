# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PluginScript
                                 A QGIS plugin
 Mon premier plugin QGIS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-02-06
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Laurent WU
        email                : laurent.wu@ensg.eu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsProject, QgsVectorLayer
from .resources import *
from .myfirstplugin_dialog import PluginScriptDialog
import os.path


class PluginScript:

    def __init__(self, iface):

        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)
        locale = QSettings().value("locale/userLocale")[0:2]
        locale_path = os.path.join(
            self.plugin_dir, "i18n", "PluginScript_{}.qm".format(locale)
        )

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        self.actions = []
        self.menu = self.tr("&MyFirstPlugin")

        self.first_start = None

    def tr(self, message):
        return QCoreApplication.translate("PluginScript", message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None,
    ):

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)

        return action

    def initGui(self):

        icon_path = ":/plugins/myfirstplugin/icon.png"
        self.add_action(
            icon_path,
            text=self.tr(""),
            callback=self.run,
            parent=self.iface.mainWindow(),
        )

        self.first_start = True

    def unload(self):
        for action in self.actions:
            self.iface.removePluginMenu(self.tr("&MyFirstPlugin"), action)
            self.iface.removeToolBarIcon(action)

    def run(self):

        if self.first_start == True:
            self.first_start = False
            self.dlg = PluginScriptDialog()

        self.list_layers()
        self.dlg.show()
        result = self.dlg.exec_()
        if result:
            pass


    # liste les couches ponctuels dans le projet courant 
    def list_layers(self):

        # clear le contenue de mon widget comboxbox avant chaque lancement de la fonction 
        self.dlg.combobox_layers.clear()

        # récupère les noms des couches du projet courant
        layers_name = QgsProject.instance().mapLayers().values()

        for layer in layers_name:
            # filtre uniquement les couches vectorielles
            if layer.type() == QgsVectorLayer.VectorLayer:

                # filtre uniquement les couches poncutelles 
                if layer.wkbType() == 1:
                    print(layer.name())
                    self.dlg.combobox_layers.addItem(layer.name())

    
